// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`ts-ignore plugin adds ignore comment 1`] = `
"// @ts-expect-error ts-migrate(123) FIXME: diagnostic message
comsole.log('Hello');"
`;

exports[`ts-ignore plugin adds ignore comment in jsx 1`] = `
"import React from 'react';

function Foo() {
  return (
    <div>
      {/* @ts-expect-error ts-migrate(123) FIXME: diagnostic message */}
      <DoesNotExist />
    </div>
  );
}

export default Foo;
"
`;

exports[`ts-ignore plugin adds ignore comment in jsx with Fragment 1`] = `
"import React from 'react';

function Foo() {
  return (
    <>
      {/* @ts-expect-error ts-migrate(123) FIXME: diagnostic message */}
      <DoesNotExist />
    </>
  );
}

export default Foo;
"
`;

exports[`ts-ignore plugin adds ignore comment with ts-ignore 1`] = `
"// @ts-ignore ts-migrate(123) FIXME: diagnostic message
comsole.log('Hello');"
`;

exports[`ts-ignore plugin does not add ignore comment for webpackChunkName 1`] = `
"const getComponent = normalizeLoader(() =>
  import(
    /* webpackChunkName: \\"Component_async\\" */
    './this_module_does_not_exist'
  ),
);
"
`;

exports[`ts-ignore plugin handles error within ternary jsx expression 1`] = `
"function Foo() {
  return someBoolean
    ? // @ts-expect-error ts-migrate(123) FIXME: diagnostic message
      <ComponentA />
    : <ComponentB />;
}
"
`;

exports[`ts-ignore plugin handles error within ternary property access 1`] = `
"function Foo() {
  return someBoolean
    ? // @ts-expect-error ts-migrate(123) FIXME: diagnostic message
      this.props.doesNotExist
    : <SomeComponent />;
}
"
`;

exports[`ts-ignore plugin handles error within ternary when false 1`] = `
"function foo() {
  return something
    ? other
    : // @ts-expect-error ts-migrate(123) FIXME: diagnostic message
      doesNotExist;
}
"
`;

exports[`ts-ignore plugin handles error within ternary when true 1`] = `
"function foo() {
  return something
    ? // @ts-expect-error ts-migrate(123) FIXME: diagnostic message
      doesNotExist
    : other;
}
"
`;

exports[`ts-ignore plugin handles multiline ternary 1`] = `
"function Foo() {
  return someBoolean ? (
    <ComponentA
      // @ts-expect-error ts-migrate(123) FIXME: diagnostic message
      doesNotExist=\\"fail\\"
    />
  ) : (
    <ComponentB />
  );
}
"
`;

exports[`ts-ignore plugin handles neighboring eslint disable comment 1`] = `
"function foo() {
  // @ts-expect-error ts-migrate(123) FIXME: diagnostic message
  // eslint-disable-next-line
  return doesNotExist;
}
"
`;

exports[`ts-ignore plugin handles single line ternary 1`] = `
"function Foo() {
  // @ts-expect-error ts-migrate(123) FIXME: diagnostic message
  return someBoolean ? <ComponentA /> : <ComponentB />;
}
"
`;

exports[`ts-ignore plugin truncates error message if too long 1`] = `
"// @ts-expect-error ts-migrate(123) FIXME: This message is too long to print and should be tr... Remove this comment to see the full error message
comsole.log('Hello');"
`;

exports[`ts-ignore plugin use message limit option to avoid error message truncation 1`] = `
"// @ts-expect-error ts-migrate(123) FIXME: This message is long, but should not be translated because of the messageLimit option value
comsole.log('Hello');"
`;

exports[`ts-ignore plugin use message limit option to truncate a error message 1`] = `
"// @ts-expect-error ts-migrate(123) FIXME: This message is too long, and should be truncated because of the messageLim... Remove this comment to see the full error message
comsole.log('Hello');"
`;
